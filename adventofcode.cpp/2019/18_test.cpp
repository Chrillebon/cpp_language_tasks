#include <iostream>
#include <vector>
#include <deque>
#include <string>
#include <map>
#include <set>
#include <math.h>
#include <utility>
#include <algorithm>
using namespace std;

int width = 81, height = 81, tries = 0, lowest_yet = 9999;
map<char,pair<int,int>> keys;
map<char,pair<int,int>> doors;
vector<vector<char>> board(width, vector<char>(height));
vector<vector<int>> visited(width, vector<int>(height));
deque<pair<int,pair<int,int>>> nxt; //steps,  x,y
pair<int,int> start;

bool keysort(pair<char,int> a, pair<char,int> b)
{
  return (a.second < b.second);
}

void new_place(map<char,int> &missing, set<char> collected) //Finder afstanden til alle nøgler
{
  int steps = nxt[0].first;
  int x = nxt[0].second.first;
  int y = nxt[0].second.second;
  //std::cout << "test: " <<x<<", "<<y<< '\n';
  nxt.erase(nxt.begin());
  if(visited[x][y])
  {
    return;
  }
  visited[x][y] = steps;
  int item = board[x][y];
  char p = item;

  //std::cout << "test " <<x<<", "<<y<<" efter "<<steps<<" med "<<p<< '\n';
  if((item >= 65 && item <= 90 && !collected.count(p+32)) || item == 35) //Væg eller dør, der stadig er der, +32, så det går fra store til små bogstaver, som vores set bruger
  {
    return;
  }
  if(item >= 97 && item <= 122 && !collected.count(p)) //En nøgle, vi ikke har samlet op før
  {
    missing[p] = steps;
  }
  nxt.push_back({steps+1, {x-1,y}});
  nxt.push_back({steps+1, {x+1,y}});
  nxt.push_back({steps+1, {x,y-1}});
  nxt.push_back({steps+1, {x,y+1}});
  return;
}

map<char,int> bfs(map<char,int> missing, set<char> collected, int x, int y)
{
  for(int i=0;i<height;i++)
  {
    for(int o=0;o<width;o++)
    {
      visited[o][i] = 0;
    }
  }
  nxt.push_back({0,{x,y}});
  while(!nxt.empty())
  {
    new_place(missing, collected);
  }
  return missing;
}

int move(map<char,int> missing, set<char> collected, int s, int x, int y)
{
  if(missing.size() == 0)
  {
    //std::cout << "end it!" << '\n';
    tries++;
    if(s < lowest_yet)
    {
      lowest_yet = s;
      std::cout << "New low: " <<s<< '\n';
    }
    if(tries % 1000 == 0)
    {
      std::cout << "tries: " <<tries<< '\n';
    }
    return s;
  }
  int firstone = 0;
  if(collected.size() == 1)
  {
    firstone = 1;
    std::cout << "New starting point: " <<*collected.begin()<< '\n';
  }
  int res = 9999;
  //std::cout << "skal køre " <<missing.size()<<" gange "<< '\n';
  vector<pair<char,int>> ordered;
  for(map<char,int>::iterator it=missing.begin();it!=missing.end();it++) //Copies the keys over, so I can sort them
  {
    ordered.push_back({it->first,it->second});
  }
  sort(ordered.begin(),ordered.end(),keysort); //Sorting the keys, so I can find the closest
  int how_many = ordered.size();
  how_many = min(how_many, 2);
  for(int i=firstone;i<how_many;i++)
  {
    map<char,int> tmp = missing; //Full copy, so I can edit
    tmp.erase(ordered[i].first);
    collected.insert(ordered[i].first); //Now collected
    //std::cout << "prøver: " <<it -> first<<'\n';
    res = min(res, move(bfs(tmp, collected, keys[ordered[i].first].first, keys[ordered[i].first].second), collected, s+(ordered[i].second), keys[ordered[i].first].first, keys[ordered[i].first].second));
    //No need to reinsert into tmp, remaking it in a sec
    collected.erase(ordered[i].first); //No longer collected
  }
  return res;
}

int main()
{
  map<char, int> missing;
  set<char> collected;
  for(int i=0;i<height;i++)
  {
    for(int o=0;o<width;o++)
    {
      std::cin >> board[o][i];
      if(board[o][i] >= 97 && board[o][i] <= 122) //Key
      {
        keys[board[o][i]] = {o,i};
      }
      if(board[o][i] >= 65 && board[o][i] <= 90) //Door
      {
        doors[board[o][i]] = {o,i};
      }
      if(board[o][i] == 64)
      {
        start = {o,i};
      }
    }
  }
  missing = bfs(missing, collected, start.first,start.second); //Opdaterer den tomme liste
  int shortest = 0;
  shortest = move(missing, collected, 0, start.first, start.second); //Alt logik foregår her
  std::cout << "Korteste vej er på "<<shortest<<" trin" << '\n';
  return 0;
}

/*
Laveste fundet: 3550
3 første forsøg: mellem 3500 og 3530
ikke: 3526, 3525, 3520, 3515, 3510, 3505

Var: 3512!!!

#################################################################################
#.................#...#.#...............#...#.........#.......#.......#.....#...#
#######.#.#######.#.#.#.#.#######.#######.#.#.###.#####.#####.#.#.###C###.#.#.#.#
#.E...#.#.#.....#...#...#.#.....#.......#.#.#t#.#.....#.#...#...#.#.#.#...#.#.#.#
#.###.###.#.###.#######.#.#.###.#######.#.###.#.#####.#.#.#.#####.#.#.#.###.#.#.#
#.#.......#...#...#...#.#.#.#.......#...#.#.........#...#.#.....#f#.....#...#a#.#
#.#########.#.#####.#.#.#.###.#####.#.###.#.#######.#####.#.###.#.#######.###.###
#...#.....#.#.....#.#...#...#.#.....#...#...#...#.#.....#.#...#.#...#h..#...#...#
#.#.#.###.#####.#.#.#######.#.#.#######.#.###.#.#.#####.###.#.#####.#.#.###.###.#
#.#.#...#.....#.#...#...#...#.#...#...#.#...#.#.#.....#...#.#.#.....#.#...#.L.#.#
###.#.#######.#.#####.#.#.###.###.###.#.#####.#.#.###.###.###.#.#####.###.###.#.#
#...#.#...#...#...#...#.#...#...#.....#.#...#.#.#...#.........#.#.......#...#...#
#.###.#.#.#.#####.#.###.###.#.#.#####.#.#.#.#.#.###.###########.#.#####.###.###.#
#.....#.#...#.....#...#...#.#.#.#.....#.#.#...#.#.....#.....#...#...#.#.#...#...#
#.#####.###.#####.###.###.#.###.#.#####.#.#####.#.#####.###.#.#####.#.#.###.#.###
#...#.#...#.#...#.#...#.#.#.#...#.....#.#.#.....#.#.....#...#...#.#.#.#...#.#...#
###.#.###.###.#.###.###.#.#.#.#.#######.#.#.#######.#####.#####.#.#.#.###.#####.#
#.#.....#.....#.....#...#.#...#.#.......#.#.......#...#.#.#.....#.#.#...#.......#
#.#####.#############.#.#.#.#####.#####.#.#######.###.#.#.###.###.#.#.###########
#.....#.#.#...........#.#...#.....#.....#.#...#...#...#.#.....#...#.#...........#
#.#.###.#.#.#.#####.#########.#####.#####.#.#.#.###.###.#.#####.#.#.###.#########
#.#.#...#...#.....#.#.......#.#.........#...#.#.....#.....#.X.#.#.#...#.#...#...#
###.#.###########.#########.#.#########.#.###.#######.#####.###.#####D#.#.#.#.#.#
#...#.#...........#.......#.#.....#.....#...#...#...#...#.#...#.......#...#...#.#
#.#.#.###.#######.#.#.#.###.#.###.#####.#.#####.###.###.#.###.#######.###.#####.#
#.#.#....k#...#...#.#.#.#...#...#.....#.#.#.....#.....#.#...#.#...V.#...#...#...#
#.#.#########.#.###.#.#.#.#####.#####.###.#.#####.#####.###.#.#.###.###.###.#.###
#.#...#.......#.#...#.#.#...#.......#...#.#.#.....#.....#...#...#...#.#.#.#.#...#
#.###.#.#######.#.###.#####.#.#########.#.#.###.#.#.#####.#######.###.#.#.#.###.#
#...#...#.......#.#.#.....#.#.#.#.......#.#.#...#.#.#.#...#.......#...R.#...#...#
#.#.#####.#######.#.#####.#.#.#.#.#####.###.#.#####.#.#.#.#W#######.#####S###.#.#
#.#......j#...#...#...I.#...#...#.#.....#...#.......#...#.#.#.....#...#.#.#.#.#.#
#.#########.###.###.###.#########.#####.#.#######.#######.#.#.###.###.#.#.#.#.#.#
#.......#.....#.....#.#.#...#.....#...#.#.......#.........#...#.#.#.#.#.#.#.#.#.#
#######.###.#.#######U#.#.#.#.#####.#.#########.###.###########.#.#.#.#.#.#.#.###
#...Y.#...#.#.........#...#.#.......#...#.#...#.#...#.............#.#.#.....#...#
#.#######.#.###.#####.#####.#########.#.#.#.#.#.#####.#############.#.#########B#
#...#.Q...#.#...#.#...#...#.#...#...#.#.#...#.#.......#i..#.....#...#.........#.#
#.#.#.#######.###.#.#####.#.#.#.#.#.###.#.###.#########.#.#.#.###.#.#########.#.#
#.#...........#p..........#...#...#.........#...........#...#.....#...N.........#
#######################################.@.#######################################
#.#.....#.#.........#.........#.....#.......#...#.......#...#.....#...G.....#...#
#.#.#.#.#.#.#####.#.#######.#.#.###.#.###.#.#.#.#.#####.#.###.###.#.#####.#.#.#.#
#...#r#.#.#.#...#n#.........#...#.#.#...#.#.#.#.#...#...#...#.#.#...#...#.#...#.#
#.###.#.#.#.#.###.###############.#.###.#.#.#.#.#.#.#.#####.#.#.#######.#.#####.#
#.#d#.#.#.....#...#.........#.....#.....#.#..m#.#.#.#.....#.#.#.....#...#...#...#
#.#.#.#.#######.#########.###.#.#######.#.#####.#.#.#####.#.#.###.#.#.#####.#.###
#...#.#.#..b....#.....#...#...#.#.....#.#.#...#.#.#.#.......#.....#...#.....#...#
#.###.#.#.#######.###.#.###.###.#.###.#.#.#.#.#.#.#.#################.#.#######.#
#.#...#...#.......#...#.#...#.#...#.#...#.#.#.#.#.#.#.....#.......#...#...#.K.#.#
###.#######.###.###.###.#.###.#####.#####.#.#.#.#.#.#.###.#.#####.#.#####.#.#.#.#
#...#.......#.#...#.....#...#.......#...#.#.#...#.#.#.#.#...#...#.....#...#.#.#.#
#.#####.#####.###.#####.###.###.#.#.###.#.###.#####.#.#.#####.#########.###.###.#
#.#...#..z#.....#...#.#.#.#...#.#.#.....#...#.#.....#.....#...#.........#.....#.#
#.#.#.###.###.#.###.#.#.#.###.###.#####.###.#.#.#.#######.###.#.#########.###.#.#
#.#.#..s#.....#.#...#.......#...#.#.#...#...#...#.#.....#.....#...#.#.....#.#.#.#
#.#.###.#######.#.#############.#.#.#.###.#########.#.#######.###.#.#.#####.#.#.#
#.....#.#.....#.#.............#...#...#.#.M...#.....#...#...#.#...#...#.....#...#
#######.#.###.#######.#####.#.#####.###.#####.#.#######.#.#.#.#.#####.###.#.#####
#...#...#.#.#.......#.....#.#...#...#...#.....#.#.....#.#.#...#.....#.....#...#.#
#O###.###.#.#######.###.###.#####.#####.#.#####.#.###.#.#.#####.###.#########.#.#
#...#.....#.....#...#.#.#...#.....#.....#.....#...#.#.#.#...#.#...#......o#...#.#
###.#########.#.#.#.#.#.#.#.#.#######.#.#####.#####.#.#.###.#.###.#######.#.###J#
#...#.........#.#.#.#.#.#.#.#.#.......#.#.......#.....#.#...#..x#.#.....#.#.....#
#.#.#.#########.#.###.#.#.###.###.#.#####.#####.#.#####.#.#####.#.#.#####.#.#####
#.#...#....g#.#.#.....#.#...#...#.#.....#.....#.#.#...#.....#...#...#.....#.#...#
#.###.#.###.#.#.###########.###.#######.#.###.###.#.#######.#.#####.#.###.###.#.#
#.#.#.#...#.#.................#.#...#...#.#.#.....#.#....v#.#.#.....#.#.#.#...#.#
#.#.#.###.#.###########.#####.#.#.#.#.#.#.#.#######.#.###.###.#.#####.#.#.#.###.#
#.#.#...#.#...F...#.....#...#.#.#.#...#.#.#.....#...#...#.....#.....#.#...#q#.#.#
#.#.###.#.#######.#.#####.#.###.#.#######.###.#.#.#.###.###########.#.#####.#.#.#
#.#...#.#.#...#...#.#...#.#.....#.......#.....#...#.#.#w#.........#.#.....#.#.#.#
#.#.#.#.#.#.#.#.#.###.#.#.#########.###.###########.#.#.#.#.#####.#######.#.#.#.#
#.#.#...#.#.#...#.#...#.#...#.....#...#.#...#.......#.#.#.#.#...#.P.#...#.#...#y#
#.#######.#.#.#####.###.###.#.###.#####.#.###.#######.#.###.#.#.###.#.#.#.#.###.#
#.#.....#.#c#.#...#.#l..#...#...#.#.A.#.#.....#.......#...Z.#.#...#.#.#.#...#...#
#.#.###T#.#.###.#.#.#.###.###.#.#.#.#.#.#.#########.#.###########.#.#.#.#####.###
#.#...#.#.#.....#...#...#.H.#.#.#.#.#...#...#.......#.....#.......#...#.....#..u#
#.###.#.#.#############.###.###.#.#.###.###.###.#########.###.###.#########.###.#
#.....#..........e....#.........#...#...#.......#.............#...........#.....#
#################################################################################

*/
