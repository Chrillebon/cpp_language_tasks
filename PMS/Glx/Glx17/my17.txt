1a) B.
Gælder faktisk ikke... Se artikel: https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html

1b) B.
Når vi ligger tal sammen, kan vi ikke rykke rundt på dem...

2) A.
abs(x*f'(x)/f(x))=abs(x*sin/cos)=abs(x*tan)

3) E.
Worst case relative error for sequential summation
da nu<0.1 => theta = 1.06*nu
1.06*nu*500/0.01 = 53000*nu

4) C.
Der er meget galt med funktionen, blandt andet er der memory leak

5) D.
Bedre locallity giver mindre cache miss, da vi kan bruge den hentede
data mere effektivt.

6a) C.
T(1) = 100, T(4) = 37
indsætter i nævneren
(f/4)*100+(1-f)*100 = 37 => f = 21/25 = 0.84

6b) B.
Theoretical execution time on 8 processors:
(f/8)*100+(1-f)*100 = 26.50000000

7a) A.
Condition number: maple

7b) D.
catastrophic cancellation i f, når man indsætter
Laf være med at trække 2 tal fra hinanden der næsten er ens

8a) B.
unit round off = 2^(-(p-1)) / 2 = 2^(-p)
= 2^(-11)

8b) C.
largest n, where we can guarentee relative error of at most 0.1
da alle er nonnegative er tæller lig med nævneren.
Dermed skal vi løse:
1.06*n*2^(-11) = 0.1
n = 193.2

9a) B.
Recursive sum, kalder 2 nye funktioner for hver,
Dermed multiple recursion

9b) C.
Hver gang man splitter den, tager man summen af de to halvdele af listen
Dette vil sige, at man skal splitte listen log_2(n) gange.
i lag k har vi 2^k lister som vi splitter.
til lag log(n), hvor vi har n lister.
Mængden af lister (antal gange vi skal gøre noget):
n + n/2 + n/4 + n/8 + n/16 = 2n (af mat2) = O(n)

Dermed er der O(n) time complexity
Samt log(n) space (Vi er max log(n) dyb) ->

9c) B.

10) D.
Time complexity fra plot:
Finder hældningen: ca. 3 gange op  for hver gang den går 1 ud.
Dermed O(n^3)

11) A.
Loop unrolling reducerer execution time, da vi lettere kan paralellisere

12) C.
int& er en reference til en int

13) D.
std::vector er et dynamisk array, kig på dokumentation

14) B.
Vil implimenteringen virke?
Finder prikproduktet mellem x og y, sammenligner med hvad???
Vi sammenligner med den absolutte fejl. Hvis alle er lige under (eller på) epsilon
ved vi, at |Ŝ_N - S_N| <= 1.06*n*sum(x_i) <= 1.06*n*sum(epsilon)
= 1.06*n^2*epsilon
Da dette kan være større end det givne, selv inden for numeriske grænser,
sammenligner vi med noget for lille
[Usikker herpå]


17)
Time complexity of Tx: going through each row, and for each row, go through each
value => O(n²)
